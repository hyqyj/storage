class Node:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None



def create_binary_tree(arr):
    if not arr:
        return None

    # 创建根节点
    root = Node(arr[0])

    # 层序遍历
    nodes = [root]
    for i in range(1, len(arr)):
        node = nodes[0]

        # 如果左子节点为空，将当前值作为左子节点的值
        if not node.left:
            node.left = Node(arr[i])
            nodes.append(node.left)

        # 如果右子节点为空，将当前值作为右子节点的值
        elif not node.right:
            node.right = Node(arr[i])
            nodes.append(node.right)

            # 当前节点的左右子节点都已经填满，将其从列表中删除
            nodes.pop(0)

    return root

arr = [1, 2, 3, 4, 5, 6, 7]
root = create_binary_tree(arr)
